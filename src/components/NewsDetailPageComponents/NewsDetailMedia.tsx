import React, { useState, useRef, useEffect } from 'react';
import { Card, CardBody } from '@heroui/react';
import { 
  Carousel, 
  CarouselContent, 
  CarouselItem, 
  CarouselNavigation,
  CarouselIndicator
} from '@/components/ui/carousel';
import type { MediaFile } from '@/types/types';

interface NewsDetailMediaProps {
  mediaFiles: MediaFile[];
  newsTitle: string;
}

const NewsDetailMedia: React.FC<NewsDetailMediaProps> = ({ 
  mediaFiles, 
  newsTitle 
}) => {
  const [index, setIndex] = useState(0);
  const videoRefs = useRef<(HTMLVideoElement | null)[]>([]);
  const [videoPreviews, setVideoPreviews] = useState<Record<string, string>>({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
  const createVideoPreview = (videoUrl: string): Promise<string> => {
    return new Promise((resolve) => {
      const video = document.createElement('video');
      video.crossOrigin = 'anonymous';
      video.preload = 'metadata';
      
      video.onloadedmetadata = () => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –∏–ª–∏ 10% –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const time = Math.min(1, video.duration * 0.1);
        video.currentTime = time;
      };

      video.onseeked = () => {
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        const ctx = canvas.getContext('2d');
        if (ctx) {
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
          const previewUrl = canvas.toDataURL('image/jpeg', 0.8);
          resolve(previewUrl);
        } else {
          resolve(''); // Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é
        }
      };

      video.onerror = () => {
        resolve(''); // Fallback –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
      };

      video.src = videoUrl;
    });
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadVideoPreviews = async () => {
      const videoFiles = mediaFiles.filter(media => media.mimeType.includes('video'));
      const previews: Record<string, string> = {};
      
      for (const video of videoFiles) {
        try {
          const preview = await createVideoPreview(video.url);
          if (preview) {
            previews[video.id] = preview;
          }
        } catch {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ:', video.url);
        }
      }
      
      setVideoPreviews(previews);
    };

    if (mediaFiles.length > 0) {
      loadVideoPreviews();
    }
  }, [mediaFiles]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–ª–∞–π–¥–∞
  const handleIndexChange = (newIndex: number) => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
    videoRefs.current.forEach(video => {
      if (video) {
        video.pause();
        video.currentTime = 0;
      }
    });
    
    setIndex(newIndex);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ –Ω–æ–≤–æ–º —Å–ª–∞–π–¥–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
    const currentMedia = mediaFiles[newIndex];
    if (currentMedia && currentMedia.mimeType.includes('video')) {
      const video = videoRefs.current[newIndex];
      if (video) {
        video.play().catch(console.warn);
      }
    }
  };

  if (!mediaFiles || mediaFiles.length === 0) {
    return null;
  }

  return (
    <div className="mb-6">
      <div className="relative w-full">
        <Carousel index={index} onIndexChange={handleIndexChange} className="w-full">
          <CarouselContent>
            {mediaFiles.map((media, mediaIndex) => (
              <CarouselItem key={media.id}>
                <Card className="w-full h-96">
                  <CardBody className="p-0 relative overflow-hidden flex items-center justify-center">
                    {media.mimeType.includes('video') ? (
                      <video
                        ref={(el) => {
                          videoRefs.current[mediaIndex] = el;
                        }}
                        src={media.url}
                        controls
                        autoPlay={index === mediaIndex}
                        muted
                        loop
                        playsInline
                        className="w-full h-full object-cover"
                        poster={media.url}
                        onError={() => {
                          console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', media.url);
                        }}
                      />
                    ) : (
                      <img
                        src={media.url}
                        alt={`${newsTitle} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${mediaIndex + 1}`}
                        className="w-full h-full object-cover"
                      />
                    )}
                  </CardBody>
                </Card>
              </CarouselItem>
            ))}
          </CarouselContent>
          {mediaFiles.length > 1 && (
            <>
              <CarouselNavigation
                className='absolute -bottom-20 left-auto top-auto w-full justify-end gap-2 sm:hidden'
                classNameButton='bg-zinc-800 *:stroke-zinc-50 dark:bg-zinc-200 dark:*:stroke-zinc-800'
                alwaysShow
              />
              <CarouselIndicator
                className='absolute -bottom-12 left-0 right-0 sm:hidden'
                classNameButton='bg-zinc-800 dark:bg-zinc-200'
              />
            </>
          )}
        </Carousel>
        
        {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –≤–∏–¥–µ –º–∏–Ω–∏-—Ñ–æ—Ç–æ–∫ */}
        {mediaFiles.length > 1 && (
          <div className="flex w-full justify-center space-x-3 px-4 mt-4">
            {mediaFiles.map((media, mediaIndex) => (
              <button
                key={media.id}
                type="button"
                aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–∞–π–¥—É ${mediaIndex + 1}`}
                onClick={() => handleIndexChange(mediaIndex)}
                className={`h-16 w-fit rounded-large overflow-hidden border-2 transition-all duration-200 justify-center items-center flex${
                  index === mediaIndex 
                    ? 'border-gray-200 hover:border-cyan-200' 
                    : ' border-default ring-2 ring-default/20'
                }`}
                style={{
                  width: '50px',
                }}
              >
                {media.mimeType.includes('video') ? (
                  <div className="relative w-full h-full">
                    {/* –ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ –∏–ª–∏ fallback */}
                    {videoPreviews[media.id] ? (
                      <img
                        src={videoPreviews[media.id]}
                        alt={`${newsTitle} - –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ ${mediaIndex + 1}`}
                        className="w-full h-full object-cover rounded-full"
                      />
                    ) : (
                      <div className="w-full h-full bg-gray-100 flex items-center justify-center rounded-full">
                        <span className="text-xs">üé•</span>
                      </div>
                    )}
                    {/* –ò–∫–æ–Ω–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
                    <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 rounded-full">
                      <div className="w-6 h-6 bg-white bg-opacity-90 rounded-full flex items-center justify-center">
                        <svg 
                          className="w-3 h-3 text-black ml-0.5" 
                          fill="currentColor" 
                          viewBox="0 0 24 24"
                        >
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                      </div>
                    </div>
                  </div>
                ) : (
                  <img
                    src={media.url}
                    alt={`${newsTitle} - –º–∏–Ω–∏–∞—Ç—é—Ä–∞ ${mediaIndex + 1}`}
                    className="w-full h-full object-cover rounded-md"
                  />
                )}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default NewsDetailMedia;
